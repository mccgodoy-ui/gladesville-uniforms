import React, { useState } from 'react';
import { ShoppingCart, Plus, Minus, User, Phone, Package, Settings, Eye, Trash2, Recycle, MapPin } from 'lucide-react';

const UniformApp = () => {
  const [currentView, setCurrentView] = useState('shop'); // 'shop' or 'admin'
  const [cart, setCart] = useState({});
  const [customerInfo, setCustomerInfo] = useState({ name: '', whatsapp: '' });
  const [orders, setOrders] = useState([]);
  const [inventory, setInventory] = useState([
    { id: 1, name: 'Polo Shirt', price: 2, category: 'Shirts' },
    { id: 2, name: 'Long Sleeve Polo', price: 2, category: 'Shirts' },
    { id: 3, name: 'School Pants', price: 2, category: 'Bottoms' },
    { id: 4, name: 'Skort', price: 2, category: 'Bottoms' },
    { id: 8, name: 'Tracksuit Pants', price: 2, category: 'Bottoms' },
    { id: 14, name: 'Shorts', price: 2, category: 'Bottoms' },
    { id: 15, name: 'Sports Shorts', price: 2, category: 'Bottoms' },
    { id: 5, name: 'Summer Dress', price: 2, category: 'Dresses' },
    { id: 6, name: 'Winter Tunic', price: 2, category: 'Dresses' },
    { id: 10, name: 'Jumper', price: 5, category: 'Winter' },
    { id: 11, name: 'Skivvy', price: 2, category: 'Winter' },
    { id: 12, name: 'School Hat', price: 2, category: 'Accessories' },
    { id: 13, name: 'School Bag', price: 5, category: 'Accessories' }
  ]);
  const [newItem, setNewItem] = useState({ name: '', price: 2, category: 'Shirts' });

  const sizes = ['4', '6', '8', '10', '12', '14', '16'];
  const categories = ['Shirts', 'Bottoms', 'Dresses', 'Winter', 'Accessories'];

  const addToCart = (item, size) => {
    const key = `${item.id}-${size}`;
    setCart(prev => ({
      ...prev,
      [key]: {
        ...item,
        size,
        quantity: (prev[key]?.quantity || 0) + 1
      }
    }));
  };

  const removeFromCart = (key) => {
    setCart(prev => {
      const newCart = { ...prev };
      if (newCart[key].quantity > 1) {
        newCart[key].quantity -= 1;
      } else {
        delete newCart[key];
      }
      return newCart;
    });
  };

  const getCartTotal = () => {
    return Object.values(cart).reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const getCartItemCount = () => {
    return Object.values(cart).reduce((total, item) => total + item.quantity, 0);
  };

  const submitOrder = () => {
    if (!customerInfo.name || !customerInfo.whatsapp || Object.keys(cart).length === 0) {
      alert('Please fill in your details and add items to cart');
      return;
    }

    const order = {
      id: Date.now(),
      customer: customerInfo,
      items: { ...cart },
      total: getCartTotal(),
      date: new Date().toLocaleDateString(),
      status: 'Pending'
    };

    setOrders(prev => [...prev, order]);
    setCart({});
    setCustomerInfo({ name: '', whatsapp: '' });
    alert('Order submitted successfully! We will contact you via WhatsApp with photos and payment details.');
  };

  const addNewItem = () => {
    if (!newItem.name) return;
    const item = {
      id: Date.now(),
      ...newItem
    };
    setInventory(prev => [...prev, item]);
    setNewItem({ name: '', price: 2, category: 'Shirts' });
  };

  const deleteItem = (id) => {
    setInventory(prev => prev.filter(item => item.id !== id));
  };

  const deleteOrder = (orderId) => {
    setOrders(prev => prev.filter(order => order.id !== orderId));
  };

  if (currentView === 'admin') {
    return (
      <div className="min-h-screen bg-gray-50">
        <div className="bg-white shadow-sm border-b border-gray-200">
          <div className="max-w-4xl mx-auto px-4 py-4">
            <div className="flex justify-between items-center">
              <h1 className="text-2xl font-bold text-gray-900">Admin Panel</h1>
              <button
                onClick={() => setCurrentView('shop')}
                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
              >
                Back to Shop
              </button>
            </div>
          </div>
        </div>

        <div className="max-w-4xl mx-auto px-4 py-6 space-y-8">
          {/* Add New Item */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold mb-4">Add New Item</h2>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <input
                type="text"
                placeholder="Item name"
                value={newItem.name}
                onChange={(e) => setNewItem(prev => ({ ...prev, name: e.target.value }))}
                className="border border-gray-300 rounded-lg px-3 py-2"
              />
              <input
                type="number"
                placeholder="Price"
                value={newItem.price}
                onChange={(e) => setNewItem(prev => ({ ...prev, price: Number(e.target.value) }))}
                className="border border-gray-300 rounded-lg px-3 py-2"
              />
              <select
                value={newItem.category}
                onChange={(e) => setNewItem(prev => ({ ...prev, category: e.target.value }))}
                className="border border-gray-300 rounded-lg px-3 py-2"
              >
                {categories.map(cat => (
                  <option key={cat} value={cat}>{cat}</option>
                ))}
              </select>
              <button
                onClick={addNewItem}
                className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700"
              >
                Add Item
              </button>
            </div>
          </div>

          {/* Current Inventory */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold mb-4">Current Inventory</h2>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {inventory.map(item => (
                <div key={item.id} className="border border-gray-200 rounded-lg p-4 flex justify-between items-center">
                  <div>
                    <h3 className="font-semibold">{item.name}</h3>
                    <p className="text-sm text-gray-600">{item.category} - ${item.price}</p>
                  </div>
                  <button
                    onClick={() => deleteItem(item.id)}
                    className="text-red-600 hover:text-red-800"
                  >
                    <Trash2 size={18} />
                  </button>
                </div>
              ))}
            </div>
          </div>

          {/* Orders */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h2 className="text-xl font-semibold mb-4">Orders ({orders.length})</h2>
            <div className="space-y-4">
              {orders.length === 0 ? (
                <p className="text-gray-500">No orders yet</p>
              ) : (
                orders.map(order => (
                  <div key={order.id} className="border border-gray-200 rounded-lg p-4">
                    <div className="flex justify-between items-start mb-3">
                      <div>
                        <h3 className="font-semibold">{order.customer.name}</h3>
                        <p className="text-sm text-gray-600">WhatsApp: {order.customer.whatsapp}</p>
                        <p className="text-sm text-gray-600">Date: {order.date}</p>
                      </div>
                      <div className="text-right">
                        <p className="font-semibold text-lg">${order.total}</p>
                        <button
                          onClick={() => deleteOrder(order.id)}
                          className="text-red-600 hover:text-red-800 mt-2"
                        >
                          <Trash2 size={18} />
                        </button>
                      </div>
                    </div>
                    <div className="space-y-1">
                      {Object.values(order.items).map((item, index) => (
                        <p key={index} className="text-sm text-gray-700">
                          {item.quantity}x {item.name} (Size {item.size}) - ${item.price} each
                        </p>
                      ))}
                    </div>
                  </div>
                ))
              )}
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b-4 border-yellow-400">
        <div className="max-w-4xl mx-auto px-4 py-6">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold text-blue-900 flex items-center space-x-3">
                <Recycle className="text-green-600" size={32} />
                <span>Pre-Loved Uniforms</span>
              </h1>
              <p className="text-blue-700 flex items-center space-x-2 mt-1">
                <MapPin className="text-blue-600" size={16} />
                <span>Gladesville Public School</span>
              </p>
            </div>
            <div className="flex items-center space-x-4">
              <button
                onClick={() => setCurrentView('admin')}
                className="text-gray-600 hover:text-blue-900"
              >
                <Settings size={24} />
              </button>
              <div className="relative">
                <ShoppingCart className="text-blue-900" size={24} />
                {getCartItemCount() > 0 && (
                  <span className="absolute -top-2 -right-2 bg-yellow-400 text-blue-900 text-xs font-bold rounded-full h-5 w-5 flex items-center justify-center">
                    {getCartItemCount()}
                  </span>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-4xl mx-auto px-4 py-6">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Main Content */}
          <div className="lg:col-span-2">
            {/* Info Banner */}
            <div className="bg-blue-50 border-l-4 border-blue-400 p-4 mb-6">
              <div className="flex">
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-blue-800">How it works:</h3>
                  <div className="mt-2 text-sm text-blue-700">
                    <p>1. Select items and sizes</p>
                    <p>2. Submit your pre-order</p>
                    <p>3. We'll send photos via WhatsApp</p>
                    <p>4. Pay through Qkr! when ready</p>
                    <p>5. Pickup at school (above lost property cage)</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Items by Category */}
            {categories.map(category => {
              const categoryItems = inventory.filter(item => item.category === category);
              if (categoryItems.length === 0) return null;
              
              return (
                <div key={category} className="mb-8">
                  <h2 className="text-xl font-semibold text-blue-900 mb-4 border-b-2 border-yellow-400 pb-2">
                    {category}
                  </h2>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {categoryItems.map(item => (
                      <div key={item.id} className="bg-white p-4 rounded-lg shadow hover:shadow-md transition-shadow">
                        <div className="flex justify-between items-start mb-3">
                          <h3 className="font-semibold text-gray-900">{item.name}</h3>
                          <span className="text-lg font-bold text-blue-600">${item.price}</span>
                        </div>
                        <div className="grid grid-cols-4 gap-2">
                          {sizes.map(size => (
                            <button
                              key={size}
                              onClick={() => addToCart(item, size)}
                              className="bg-blue-100 hover:bg-blue-200 text-blue-800 py-2 px-3 rounded text-sm font-medium transition-colors"
                            >
                              {size}
                            </button>
                          ))}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              );
            })}
          </div>

          {/* Cart Sidebar */}
          <div className="lg:col-span-1">
            <div className="bg-white p-6 rounded-lg shadow sticky top-6">
              <h2 className="text-xl font-semibold text-blue-900 mb-4">Your Order</h2>
              
              {/* Customer Info */}
              <div className="space-y-3 mb-4">
                <div className="flex items-center space-x-2">
                  <User size={18} className="text-blue-600" />
                  <input
                    type="text"
                    placeholder="Your name"
                    value={customerInfo.name}
                    onChange={(e) => setCustomerInfo(prev => ({ ...prev, name: e.target.value }))}
                    className="flex-1 border border-gray-300 rounded px-3 py-2 text-sm"
                  />
                </div>
                <div className="flex items-center space-x-2">
                  <Phone size={18} className="text-blue-600" />
                  <input
                    type="text"
                    placeholder="WhatsApp number"
                    value={customerInfo.whatsapp}
                    onChange={(e) => setCustomerInfo(prev => ({ ...prev, whatsapp: e.target.value }))}
                    className="flex-1 border border-gray-300 rounded px-3 py-2 text-sm"
                  />
                </div>
              </div>

              {/* Cart Items */}
              <div className="space-y-3 mb-4 max-h-64 overflow-y-auto">
                {Object.keys(cart).length === 0 ? (
                  <p className="text-gray-500 text-sm">No items in cart</p>
                ) : (
                  Object.entries(cart).map(([key, item]) => (
                    <div key={key} className="flex items-center justify-between p-2 bg-gray-50 rounded">
                      <div className="flex-1">
                        <p className="text-sm font-medium">{item.name}</p>
                        <p className="text-xs text-gray-600">Size {item.size}</p>
                      </div>
                      <div className="flex items-center space-x-2">
                        <button
                          onClick={() => removeFromCart(key)}
                          className="text-blue-600 hover:text-blue-800"
                        >
                          <Minus size={16} />
                        </button>
                        <span className="text-sm font-medium">{item.quantity}</span>
                        <button
                          onClick={() => addToCart(item, item.size)}
                          className="text-blue-600 hover:text-blue-800"
                        >
                          <Plus size={16} />
                        </button>
                      </div>
                    </div>
                  ))
                )}
              </div>

              {/* Total */}
              {Object.keys(cart).length > 0 && (
                <div className="border-t pt-4 mb-4">
                  <div className="flex justify-between items-center">
                    <span className="font-semibold">Total:</span>
                    <span className="text-xl font-bold text-blue-600">${getCartTotal()}</span>
                  </div>
                </div>
              )}

              {/* Submit Button */}
              <button
                onClick={submitOrder}
                disabled={!customerInfo.name || !customerInfo.whatsapp || Object.keys(cart).length === 0}
                className="w-full bg-blue-600 hover:bg-blue-700 disabled:bg-gray-400 text-white font-semibold py-3 px-4 rounded-lg transition-colors flex items-center justify-center space-x-2"
              >
                <Package size={18} />
                <span>Submit Pre-Order</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default UniformApp;
